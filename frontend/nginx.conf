


http {

    upstream flask-backend {

        # THis the local IP of backend flask inside docker container
        server 192.168.2.10:8080;
        # OR you can make flask run by default on localhose address, and don't use docker local container IP
        # server  http://127.0.0.1:8080;
    }

    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;
    sendfile        on;
    keepalive_timeout  65;

   server {

        listen 443 ssl;
        # listen 80;
        http2 on;

        # Depends on the ip of the server
        # server_name  localhost;

        server_name  goldgardyntest.ddns.net;

        location /api {

            add_header Access-Control-Allow-Origin "$http_origin";
            add_header Access-Control-Allow-Methods "OPTIONS, POST, GET";
            add_header Access-Control-Max-Age "3600";
            add_header Access-Control-Allow-Credentials "true";
            add_header Access-Control-Allow-Headers "Content-Type";
            set $test  "A";

            # if ($http_origin ~* "^http://197.57.100.1$") {
            # add_header Access-Control-Allow-Origin "$http_origin";
            # add_header Access-Control-Allow-Methods "OPTIONS, POST, GET";
            # add_header Access-Control-Max-Age "3600";
            # add_header Access-Control-Allow-Credentials "true";
            # add_header Access-Control-Allow-Headers "Content-Type";
            # set $test  "A";
            # }
        
            if ($request_method = 'OPTIONS') {
                set $test  "${test}B";
            }

            if ($test = "AB") {
                add_header Access-Control-Allow-Origin "$http_origin";
                add_header Access-Control-Allow-Methods "OPTIONS, DELETE, POST, GET, PATCH, PUT";
                add_header Access-Control-Max-Age "3600";
                add_header Access-Control-Allow-Credentials "true";
                add_header Access-Control-Allow-Headers "Content-Type";
                return 204;
            }

            if ($test = "B") {
                return 403;
            }

            proxy_pass http://flask-backend;

            proxy_http_version  1.1;
            proxy_cache_bypass  $http_upgrade;
            proxy_set_header Upgrade           $http_upgrade;
            proxy_set_header Connection        "upgrade";
            proxy_set_header Host              $host;
            proxy_set_header X-Real-IP         $remote_addr;
            proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host  $host;
            proxy_set_header X-Forwarded-Port  $server_port;
        }


        location / {
            # add_header Custom-Header "Hello, Client!";
            root   /app;
            index  index.html;
            try_files $uri $uri/ /index.html;
          
        }


        ssl_certificate /etc/nginx/ssl/fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/privkey.pem;
        ssl_protocols TLSv1.3;

    }

}

events
{

}

